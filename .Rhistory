scores = scoresEAP(est)
nitems = ncol(data)
nscores = nrow(scores)
ninds = nrow(data)
inicio = Sys.time()
scoresTot = rep(0,nscores)
for(i in 1:ninds){
for(j in 1:nscores){
if(sum(data[i,] == scores[j,][1:nitems]) == nitems){
scoresTot[i] = scores[j,][nitems + 1]
}
}
}
print(paste("expansióm patrones for: ",Sys.time() - inicio))
inicio = Sys.time()
index = indexPat(data,est$pats)
scoresTot2 = numeric(nrow(data))
for(mm in 1:nrow(scores)){
scoresTot2[index[[mm]]] = scores[mm,ncol(data) +1]
}
print(paste("expansión patrones for: ",Sys.time() - inicio))
inicio = Sys.time()
LL = P = Q = matrix(0,nrow = ninds,ncol = nitems)
for(j in 1:ninds){
for(i in 1:nitems){
P[j,i] = gg(a = est$zita[i,1],d = est$zita[i,2],cp = qlogis(est$zita[i,3]),theta = scoresTot[j])
}
}
print(paste("Pobabilidad for: ",Sys.time() - inicio))
inicio = Sys.time()
PP = apply(zita,1,M3PL,scoresTot)
print(paste("Pobabilidad for: ",Sys.time() - inicio))
print(sum(PP == P))
stop("")
print(dim(LL))
Q = 1 - P
LL[data == 1] = P[data == 1]
LL[data == 0] = Q[data == 0]
LL = colSums(log(LL))
print(LL)
mu = sigmaCuad = rep(0,nitems)
for( i in 1:nitems){
Pi = cbind(P[,i],Q[,i])
logPi = log(Pi)
mu[i] = sum(Pi * logPi)
#sigmaCuad = sigmaCuad + Pi[,1] * Pi[,2] * (log(Pi[,1]/Pi[,2])^2)
sigmaCuad[i] = sum(Pi[,1] * Pi[,2] * (log(Pi[,1]/Pi[,2])^2))
}
Z3 = (LL - mu) / sqrt(sigmaCuad)
Z3
}
z=itemFit2(est = est,data = data)
#Probabilidad
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
M3PL <- function(zita,theta){
exp(zita[3])/(1+exp(zita[3]))+ (1-(exp(zita[3])/(1+exp(zita[3]))))*(1 + exp(-D*(zita[1]*theta+ zita[2])))^(-1)
}
indexPat = function(data,pats){
comprimData = apply(data,MARGIN=1,FUN=paste,collapse="/")
comprimPats = apply(pats[,1:ncol(data)],MARGIN=1,FUN=paste,collapse="/")
index = lapply(comprimPats,FUN = function(x) {which(x == comprimData)})
index
}
itemFit2 = function(est,data){
zita  = est$zita
zita[,3] = qlogis(zita[,3])
scores = scoresEAP(est)
nitems = ncol(data)
nscores = nrow(scores)
ninds = nrow(data)
inicio = Sys.time()
scoresTot = rep(0,nscores)
for(i in 1:ninds){
for(j in 1:nscores){
if(sum(data[i,] == scores[j,][1:nitems]) == nitems){
scoresTot[i] = scores[j,][nitems + 1]
}
}
}
print(paste("expansióm patrones for: ",Sys.time() - inicio))
inicio = Sys.time()
index = indexPat(data,est$pats)
scoresTot2 = numeric(nrow(data))
for(mm in 1:nrow(scores)){
scoresTot2[index[[mm]]] = scores[mm,ncol(data) +1]
}
print(paste("expansión patrones for: ",Sys.time() - inicio))
print(sum(scoresTot2 == scoresTot))
inicio = Sys.time()
LL = P = Q = matrix(0,nrow = ninds,ncol = nitems)
for(j in 1:ninds){
for(i in 1:nitems){
P[j,i] = gg(a = est$zita[i,1],d = est$zita[i,2],cp = qlogis(est$zita[i,3]),theta = scoresTot[j])
}
}
print(paste("Pobabilidad for: ",Sys.time() - inicio))
inicio = Sys.time()
PP = apply(zita,1,M3PL,scoresTot)
print(paste("Pobabilidad for: ",Sys.time() - inicio))
print(sum(PP == P))
stop("")
print(dim(LL))
Q = 1 - P
LL[data == 1] = P[data == 1]
LL[data == 0] = Q[data == 0]
LL = colSums(log(LL))
print(LL)
mu = sigmaCuad = rep(0,nitems)
for( i in 1:nitems){
Pi = cbind(P[,i],Q[,i])
logPi = log(Pi)
mu[i] = sum(Pi * logPi)
#sigmaCuad = sigmaCuad + Pi[,1] * Pi[,2] * (log(Pi[,1]/Pi[,2])^2)
sigmaCuad[i] = sum(Pi[,1] * Pi[,2] * (log(Pi[,1]/Pi[,2])^2))
}
Z3 = (LL - mu) / sqrt(sigmaCuad)
Z3
}
z=itemFit2(est = est,data = data)
#Probabilidad
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
M3PL <- function(zita,theta){
exp(zita[3])/(1+exp(zita[3]))+ (1-(exp(zita[3])/(1+exp(zita[3]))))*(1 + exp(-D*(zita[1]*theta+ zita[2])))^(-1)
}
indexPat = function(data,pats){
comprimData = apply(data,MARGIN=1,FUN=paste,collapse="/")
comprimPats = apply(pats[,1:ncol(data)],MARGIN=1,FUN=paste,collapse="/")
index = lapply(comprimPats,FUN = function(x) {which(x == comprimData)})
index
}
itemFit2 = function(est,data){
zita  = est$zita
zita[,3] = qlogis(zita[,3])
scores = scoresEAP(est)
nitems = ncol(data)
nscores = nrow(scores)
ninds = nrow(data)
inicio = Sys.time()
scoresTot = rep(0,nscores)
for(i in 1:ninds){
for(j in 1:nscores){
if(sum(data[i,] == scores[j,][1:nitems]) == nitems){
scoresTot[i] = scores[j,][nitems + 1]
}
}
}
print(paste("expansióm patrones for: ",Sys.time() - inicio))
inicio = Sys.time()
index = indexPat(data,est$pats)
scoresTot2 = numeric(nrow(data))
for(mm in 1:nrow(scores)){
scoresTot2[index[[mm]]] = scores[mm,ncol(data) +1]
}
print(paste("expansión patrones for: ",Sys.time() - inicio))
print(sum(scoresTot2 == scoresTot))
inicio = Sys.time()
LL = P = Q = matrix(0,nrow = ninds,ncol = nitems)
for(j in 1:ninds){
for(i in 1:nitems){
P[j,i] = gg(a = est$zita[i,1],d = est$zita[i,2],cp = qlogis(est$zita[i,3]),theta = scoresTot[j])
}
}
print(paste("Pobabilidad for: ",Sys.time() - inicio))
inicio = Sys.time()
PP = apply(zita,1,M3PL,scoresTot)
print(paste("Pobabilidad for: ",Sys.time() - inicio))
print(sum(PP == P))
print(dim(LL))
Q = 1 - P
LL[data == 1] = P[data == 1]
LL[data == 0] = Q[data == 0]
LL = colSums(log(LL))
print(LL)
mu = sigmaCuad = rep(0,nitems)
for( i in 1:nitems){
Pi = cbind(P[,i],Q[,i])
logPi = log(Pi)
mu[i] = sum(Pi * logPi)
#sigmaCuad = sigmaCuad + Pi[,1] * Pi[,2] * (log(Pi[,1]/Pi[,2])^2)
sigmaCuad[i] = sum(Pi[,1] * Pi[,2] * (log(Pi[,1]/Pi[,2])^2))
}
Z3 = (LL - mu) / sqrt(sigmaCuad)
Z3
}
z=itemFit2(est = est,data = data)
#Probabilidad
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
M3PL <- function(zita,theta){
exp(zita[3])/(1+exp(zita[3]))+ (1-(exp(zita[3])/(1+exp(zita[3]))))*(1 + exp(-D*(zita[1]*theta+ zita[2])))^(-1)
}
indexPat = function(data,pats){
comprimData = apply(data,MARGIN=1,FUN=paste,collapse="/")
comprimPats = apply(pats[,1:ncol(data)],MARGIN=1,FUN=paste,collapse="/")
index = lapply(comprimPats,FUN = function(x) {which(x == comprimData)})
index
}
itemFit2 = function(est,data){
zita  = est$zita
zita[,3] = qlogis(zita[,3])
scores = scoresEAP(est)
nitems = ncol(data)
nscores = nrow(scores)
ninds = nrow(data)
inicio = Sys.time()
scoresTot = rep(0,nscores)
for(i in 1:ninds){
for(j in 1:nscores){
if(sum(data[i,] == scores[j,][1:nitems]) == nitems){
scoresTot[i] = scores[j,][nitems + 1]
}
}
}
print(paste("expansióm patrones for: ",Sys.time() - inicio))
inicio = Sys.time()
index = indexPat(data,est$pats)
scoresTot2 = numeric(nrow(data))
for(mm in 1:nrow(scores)){
scoresTot2[index[[mm]]] = scores[mm,ncol(data) +1]
}
print(paste("expansión patrones for: ",Sys.time() - inicio))
print(sum(scoresTot2 == scoresTot))
inicio = Sys.time()
LL = P = Q = matrix(0,nrow = ninds,ncol = nitems)
for(j in 1:ninds){
for(i in 1:nitems){
P[j,i] = gg(a = est$zita[i,1],d = est$zita[i,2],cp = qlogis(est$zita[i,3]),theta = scoresTot[j])
}
}
print(paste("Pobabilidad for: ",Sys.time() - inicio))
inicio = Sys.time()
PP = apply(zita,1,M3PL,scoresTot)
print(paste("Pobabilidad for: ",Sys.time() - inicio))
print(sum(PP == P))
print(dim(LL))
Q = 1 - P
LL[data == 1] = P[data == 1]
LL[data == 0] = Q[data == 0]
LL = colSums(log(LL))
print(LL)
mu = sigmaCuad = rep(0,nitems)
for( i in 1:nitems){
Pi = cbind(P[,i],Q[,i])
logPi = log(Pi)
mu[i] = sum(Pi * logPi)
#sigmaCuad = sigmaCuad + Pi[,1] * Pi[,2] * (log(Pi[,1]/Pi[,2])^2)
sigmaCuad[i] = sum(Pi[,1] * Pi[,2] * (log(Pi[,1]/Pi[,2])^2))
}
Z3 = (LL - mu) / sqrt(sigmaCuad)
Z3
}
tiempoCom = Sys.time()
z=itemFit2(est = est,data = data)
Sys.time() - tiempoCom
#Probabilidad
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
M3PL <- function(zita,theta){
exp(zita[3])/(1+exp(zita[3]))+ (1-(exp(zita[3])/(1+exp(zita[3]))))*(1 + exp(-D*(zita[1]*theta+ zita[2])))^(-1)
}
indexPat = function(data,pats){
comprimData = apply(data,MARGIN=1,FUN=paste,collapse="/")
comprimPats = apply(pats[,1:ncol(data)],MARGIN=1,FUN=paste,collapse="/")
index = lapply(comprimPats,FUN = function(x) {which(x == comprimData)})
index
}
itemFit2 = function(est,data){
zita  = est$zita
zita[,3] = qlogis(zita[,3])
scores = scoresEAP(est)
nitems = ncol(data)
nscores = nrow(scores)
ninds = nrow(data)
index = indexPat(data,est$pats)
scoresTot = numeric(nrow(data))
for(mm in 1:nrow(scores)){
scoresTot[index[[mm]]] = scores[mm,ncol(data) +1]
}
inicio = Sys.time()
P = apply(zita,1,M3PL,scoresTot)
LL[data == 1] = P[data == 1]
LL[data == 0] = 1 - P[data == 0]
LL = colSums(log(LL))
mu = sigmaCuad = rep(0,nitems)
for( i in 1:nitems){
Pi = cbind(P[,i],Q[,i])
logPi = log(Pi)
mu[i] = sum(Pi * logPi)
#sigmaCuad = sigmaCuad + Pi[,1] * Pi[,2] * (log(Pi[,1]/Pi[,2])^2)
sigmaCuad[i] = sum(Pi[,1] * Pi[,2] * (log(Pi[,1]/Pi[,2])^2))
}
Z3 = (LL - mu) / sqrt(sigmaCuad)
Z3
}
tiempoCom = Sys.time()
z=itemFit2(est = est,data = data)
Sys.time() - tiempoCom
#Probabilidad
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
M3PL <- function(zita,theta){
exp(zita[3])/(1+exp(zita[3]))+ (1-(exp(zita[3])/(1+exp(zita[3]))))*(1 + exp(-D*(zita[1]*theta+ zita[2])))^(-1)
}
indexPat = function(data,pats){
comprimData = apply(data,MARGIN=1,FUN=paste,collapse="/")
comprimPats = apply(pats[,1:ncol(data)],MARGIN=1,FUN=paste,collapse="/")
index = lapply(comprimPats,FUN = function(x) {which(x == comprimData)})
index
}
itemFit2 = function(est,data){
zita  = est$zita
zita[,3] = qlogis(zita[,3])
scores = scoresEAP(est)
nitems = ncol(data)
nscores = nrow(scores)
ninds = nrow(data)
index = indexPat(data,est$pats)
scoresTot = numeric(nrow(data))
for(mm in 1:nrow(scores)){
scoresTot[index[[mm]]] = scores[mm,ncol(data) +1]
}
inicio = Sys.time()
P = apply(zita,1,M3PL,scoresTot)
LL = matrix(0,ncol = ncol(P),nrow = nrow(P))
LL[data == 1] = P[data == 1]
LL[data == 0] = 1 - P[data == 0]
LL = colSums(log(LL))
mu = sigmaCuad = rep(0,nitems)
for( i in 1:nitems){
Pi = cbind(P[,i],Q[,i])
logPi = log(Pi)
mu[i] = sum(Pi * logPi)
#sigmaCuad = sigmaCuad + Pi[,1] * Pi[,2] * (log(Pi[,1]/Pi[,2])^2)
sigmaCuad[i] = sum(Pi[,1] * Pi[,2] * (log(Pi[,1]/Pi[,2])^2))
}
Z3 = (LL - mu) / sqrt(sigmaCuad)
Z3
}
tiempoCom = Sys.time()
z=itemFit2(est = est,data = data)
Sys.time() - tiempoCom
#Probabilidad
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
M3PL <- function(zita,theta){
exp(zita[3])/(1+exp(zita[3]))+ (1-(exp(zita[3])/(1+exp(zita[3]))))*(1 + exp(-D*(zita[1]*theta+ zita[2])))^(-1)
}
indexPat = function(data,pats){
comprimData = apply(data,MARGIN=1,FUN=paste,collapse="/")
comprimPats = apply(pats[,1:ncol(data)],MARGIN=1,FUN=paste,collapse="/")
index = lapply(comprimPats,FUN = function(x) {which(x == comprimData)})
index
}
itemFit2 = function(est,data){
zita  = est$zita
zita[,3] = qlogis(zita[,3])
scores = scoresEAP(est)
nitems = ncol(data)
nscores = nrow(scores)
ninds = nrow(data)
index = indexPat(data,est$pats)
scoresTot = numeric(nrow(data))
for(mm in 1:nrow(scores)){
scoresTot[index[[mm]]] = scores[mm,ncol(data) +1]
}
inicio = Sys.time()
P = apply(zita,1,M3PL,scoresTot)
LL = matrix(0,ncol = ncol(P),nrow = nrow(P))
LL[data == 1] = P[data == 1]
LL[data == 0] = 1 - P[data == 0]
LL = colSums(log(LL))
mu = sigmaCuad = rep(0,nitems)
for( i in 1:nitems){
Pi = cbind(P[,i],1 - P[,i])
logPi = log(Pi)
mu[i] = sum(Pi * logPi)
#sigmaCuad = sigmaCuad + Pi[,1] * Pi[,2] * (log(Pi[,1]/Pi[,2])^2)
sigmaCuad[i] = sum(Pi[,1] * Pi[,2] * (log(Pi[,1]/Pi[,2])^2))
}
Z3 = (LL - mu) / sqrt(sigmaCuad)
Z3
}
tiempoCom = Sys.time()
z=itemFit2(est = est,data = data)
Sys.time() - tiempoCom
z
itemfit(fit)
itemFitExport = function(items,inds,replicas){
for(j in i:length(inds)){
for(i in 1:length(items)){
for(k in 1:replicas){
}
}
}
}
inds = c(1000,2000)
items = c(10,20)
replicas = 5
itemFitExport(items = items,inds = inds,replicas = replicas)
itemFitExport = function(items,inds,replicas){
for(j in i:length(inds)){
for(i in 1:length(items)){
for(k in 1:replicas){
data = read.table("/home/mirt/Validaciones_Modelos_Principales/Bloque_1/2PL/Datasets/Test_"items[i]"_",k,"_",inds[j],".csv",sep=" ",header=T)
est = estimacion.Newton(datos = data)
}
}
}
}
itemFitExport = function(items,inds,replicas){
for(j in i:length(inds)){
for(i in 1:length(items)){
for(k in 1:replicas){
data = read.table("/home/mirt/Validaciones_Modelos_Principales/Bloque_1/2PL/Datasets/Test_"items[i]"_",k,"_",inds[j],".csv",sep=" ",header=T)
itemFitExport = function(items,inds,replicas){
for(j in i:length(inds)){
for(i in 1:length(items)){
for(k in 1:replicas){
data = read.table("/home/mirt/Validaciones_Modelos_Principales/Bloque_1/2PL/Datasets/Test_",items[i],"_",k,"_",inds[j],".csv",sep=" ",header=T)
est = estimacion.Newton(datos = data)
}
}
}
}
inds = c(1000,2000)
items = c(10,20)
replicas = 5
itemFitExport(items = items,inds = inds,replicas = replicas)
data = read.table(paste("/home/mirt/Validaciones_Modelos_Principales/Bloque_1/2PL/Datasets/Test_",items[i],"_",k,"_",inds[j],".csv",sep = ""),sep=" ",header=T)
itemFitExport = function(items,inds,replicas){
for(j in i:length(inds)){
for(i in 1:length(items)){
for(k in 1:replicas){
data = read.table(paste("/home/mirt/Validaciones_Modelos_Principales/Bloque_1/2PL/Datasets/Test_",items[i],"_",k,"_",inds[j],".csv",sep = ""),sep=" ",header=T)
est = estimacion.Newton(datos = data)
}
}
}
}
inds = c(1000,2000)
items = c(10,20)
replicas = 5
itemFitExport(items = items,inds = inds,replicas = replicas)
itemFitExport = function(items,inds,replicas){
for(j in i:length(inds)){
for(i in 1:length(items)){
for(k in 1:replicas){
data = read.table(paste("/home/mirt/Validaciones_Modelos_Principales/Bloque_1/2PL/Datasets/Test_",items[i],"_",k,"_",inds[j],".csv",sep = ""),sep=" ",header=T)
est = estimacion.Newton(datos = data)
Zh=itemFit2(est = est,data = data)
write.table(x = Zh,file = paste("/home/mirt/Validaciones_Modelos_Principales/Bloque_1/2PL/itemFitZhSics/Test_",items[i],"_",k,"_",inds[j],".csv",sep = ""))
}
}
}
}
inds = c(1000,2000)
items = c(10,20)
replicas = 5
itemFitExport(items = items,inds = inds,replicas = replicas)
itemFitExport = function(items,inds,replicas){
for(j in i:length(inds)){
for(i in 1:length(items)){
for(k in 1:replicas){
data = read.table(paste("/home/mirt/Validaciones_Modelos_Principales/Bloque_1/2PL/Datasets/Test_",items[i],"_",k,"_",inds[j],".csv",sep = ""),sep=" ",header=T)
est = estimacion.Newton(datos = data)
Zh=itemFit2(est = est,data = data)
write.table(x = Zh,file = paste("/home/mirt/Validaciones_Modelos_Principales/Bloque_1/2PL/itemFitZhSics/Test_",items[i],"_",k,"_",inds[j],".csv",sep = ""),row.names = F)
}
}
}
}
inds = c(1000,2000)
items = c(10,20)
replicas = 4
itemFitExport(items = items,inds = inds,replicas = replicas)
inds = c(5000,10000)
items = c(500,10)
replicas = 4
itemFitExport(items = items,inds = inds,replicas = replicas)
inds = c(5000,10000)
items = c(50,100)
replicas = 4
itemFitExport(items = items,inds = inds,replicas = replicas)
log(.Machine$double.eps)
.Machine$double.eps
log((.Machine$double.eps))
sqrt(.Machine$double.eps)
c(1,2,6,4,0)
x=c(1,2,6,4,0)
log(x)
logX = log(x)
logX[logX == -Inf] = log(.Machine$double.eps)
logX
x=c(1,2,6,4,0)
logX
logX[logX == -Inf] = log(.Machine$double.eps)
x=c(1,2,6,4,0)
log(x)
logX = log(x)
logX == -Inf
log[logX == -Inf] = log(.Machine$double.eps)
log[logX == -Inf] = log(.Machine$double.eps)
comprimData = apply(data,MARGIN=1,FUN=paste,collapse="/")
comprimData
