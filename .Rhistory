datos[1,] == scores[1,]
datos[1,] == scores[1,][1:(ncol(scores) -1 )]
sum(datos[1,] == scores[1,][1:(ncol(scores) -1 )])
sum(datos[1,] == scores[1,][1:(ncol(scores) -1 )]) == ncol(datos)
scores = scoresEAP(est)
datos
which(datos[1,] == )
scoresTot = rep(0,nrow(datos))
for(i in 1:nrow(datos)){
for(j in 1:nrow(scores)){
if(sum(datos[1,] == scores[1,][1:(ncol(scores) -1 )]) == ncol(datos)){
scoresTot[i] = scores[j,][ncol(scores)]
}
}
}
scoresTot
scoresTot = rep(0,nrow(datos))
for(i in 1:nrow(datos)){
for(j in 1:nrow(scores)){
if(sum(datos[1,] == scores[1,][1:(ncol(scores) -1 )]) == ncol(datos)){
scoresTot[i] = scores[j,][ncol(scores)]
}
}
}
scoresTot = rep(0,nrow(datos))
for(i in 1:nrow(datos)){
for(j in 1:nrow(scores)){
if(sum(datos[i,] == scores[j,][1:(ncol(scores) -1 )]) == ncol(datos)){
scoresTot[i] = scores[j,][ncol(scores)]
}
}
}
scoresTot
personfit = function(est,data){
scores = scoresEAP(est)
scoresTot = rep(0,nrow(datos))
for(i in 1:nrow(datos)){
for(j in 1:nrow(scores)){
if(sum(datos[i,] == scores[j,][1:(ncol(scores) -1 )]) == ncol(datos)){
scoresTot[i] = scores[j,][ncol(scores)]
}
}
}
scoresTot
}
personfit(est = est,data = datos)
#Probabilidad
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
personfit = function(est,data){
scores = scoresEAP(est)
nitems = ncol(datos)
nscores = nrow(scores)
ninds = nrow(datos)
scoresTot = rep(0,nscores)
for(i in 1:ninds{
for(j in 1:nscores){
if(sum(datos[i,] == scores[j,][1:nitems]) == nitems)){
scoresTot[i] = scores[j,][nitems + 1]
}
#Probabilidad
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
personfit = function(est,data){
scores = scoresEAP(est)
nitems = ncol(datos)
nscores = nrow(scores)
ninds = nrow(datos)
scoresTot = rep(0,nscores)
for(i in 1:ninds{
#Probabilidad
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
personfit = function(est,data){
scores = scoresEAP(est)
nitems = ncol(datos)
nscores = nrow(scores)
ninds = nrow(datos)
scoresTot = rep(0,nscores)
for(i in 1:ninds){
for(j in 1:nscores){
if(sum(datos[i,] == scores[j,][1:nitems]) == nitems)){
scoresTot[i] = scores[j,][nitems + 1]
#Probabilidad
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
personfit = function(est,data){
scores = scoresEAP(est)
nitems = ncol(datos)
nscores = nrow(scores)
ninds = nrow(datos)
scoresTot = rep(0,nscores)
for(i in 1:ninds){
for(j in 1:nscores){
if(sum(datos[i,] == scores[j,][1:nitems]) == nitems)){
}
personfit = function(est,data){
scores = scoresEAP(est)
nitems = ncol(datos)
nscores = nrow(scores)
ninds = nrow(datos)
scoresTot = rep(0,nscores)
for(i in 1:ninds){
for(j in 1:nscores){
if(sum(datos[i,] == scores[j,][1:nitems] == nitems)){
scoresTot[i] = scores[j,][nitems + 1]
}
}
personfit = function(est,data){
scores = scoresEAP(est)
nitems = ncol(datos)
nscores = nrow(scores)
ninds = nrow(datos)
scoresTot = rep(0,nscores)
for(i in 1:ninds){
for(j in 1:nscores){
if(sum(datos[i,] == scores[j,][1:nitems] == nitems)){
personfit = function(est,data){
scores = scoresEAP(est)
nitems = ncol(datos)
nscores = nrow(scores)
ninds = nrow(datos)
scoresTot = rep(0,nscores)
for(i in 1:ninds){
for(j in 1:nscores){
if(sum(datos[i,] == scores[j,][1:nitems]) == nitems){
scoresTot[i] = scores[j,][nitems + 1]
}
}
}
LL = matrix(0,nrow = length())
}
personfit(est = est,data = datos)
#Probabilidad
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
personfit = function(est,data){
scores = scoresEAP(est)
nitems = ncol(datos)
nscores = nrow(scores)
ninds = nrow(datos)
scoresTot = rep(0,nscores)
for(i in 1:ninds){
for(j in 1:nscores){
if(sum(datos[i,] == scores[j,][1:nitems]) == nitems){
scoresTot[i] = scores[j,][nitems + 1]
}
}
}
LL = matrix(0,nrow = ninds,ncol = nitems)
}
personfit(est = est,data = datos)
#Probabilidad
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
personfit = function(est,data){
scores = scoresEAP(est)
nitems = ncol(datos)
nscores = nrow(scores)
ninds = nrow(datos)
scoresTot = rep(0,nscores)
for(i in 1:ninds){
for(j in 1:nscores){
if(sum(datos[i,] == scores[j,][1:nitems]) == nitems){
scoresTot[i] = scores[j,][nitems + 1]
}
}
}
print(scoresTot)
LL = matrix(0,nrow = ninds,ncol = nitems)
}
personfit(est = est,data = datos)
detach("package:mirt", unload=TRUE)
remove.packages("mirt")
setwd("/home/mirt/Paquetes existentes en R/Paquete MIRT/Para edicion/cambios_mirt")
system("tar -czvf mirt_1.6.1.tar.gz mirt")
install.packages(pkgs="mirt_1.6.1.tar.gz",dependencies=F,repos=NULL)
library(mirt)
rm(list = ls())
library(mirt)
data = expand.table(LSAT7)
fit = mirt(data,model = 1,itemtype = "3PL")
sink("/home/mirt/Salidas.txt")
per=personfit(x = fit)
sink()
log(c(0.48614190, 0.5138581))
plogis(0.5)
qlogis(0.5)
qlogis(600)
qlogis(0.99)
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
#Probabilidad
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
personfit = function(est,data){
scores = scoresEAP(est)
nitems = ncol(datos)
nscores = nrow(scores)
ninds = nrow(datos)
scoresTot = rep(0,nscores)
for(i in 1:ninds){
for(j in 1:nscores){
if(sum(datos[i,] == scores[j,][1:nitems]) == nitems){
scoresTot[i] = scores[j,][nitems + 1]
}
}
}
print(scoresTot)
LL = matrix(0,nrow = ninds,ncol = nitems)
for(j in 1:ninds){
for(i in 1:nitems){
LL[j,i] = gg(a = est$zita[i,1],d = - est$zita[i,2] * est$zita[i,1],cp = qlogis(est$zita[i,3]),theta = scoresTot[j,nitems + 1])
}
}
print(LL)
}
personfit(est = est,data = datos)
rm(list = ls(all = TRUE))
library(mirt)
library(Matrix)
library(numDeriv)
#-fopenmp
setwd("/home/mirt/Git/GrupoSICS/dev/SICSRepositoryR/")
system("PKG_CPPFLAGS=`Rscript -e 'Rcpp:::CxxFlags()'` PKG_LIBS=`Rscript -e 'Rcpp:::LdFlags()'` R CMD SHLIB  pasoe3.cpp")
system("PKG_CPPFLAGS=`Rscript -e 'Rcpp:::CxxFlags()'` PKG_LIBS=`Rscript -e 'Rcpp:::LdFlags()'` R CMD SHLIB  pasom3.cpp")
dyn.load("pasoe3.so")
dyn.load("pasom3.so")
###########
# PRUEBAS #
###########
D = 1
##################################################
# 3.Funcion para inicializar valores con Andrade #
##################################################
start.andrade = function(datos){
I = ncol(datos)
P = nrow(datos)
m = 5
#scores
T = apply(datos,1,sum)
#correlacion biserial
corr.bis = rep(NA,I)
for(i in 1:I){
corr.bis[i]  = cor(datos[,i],T,method="pearson")
}
#a inicial
a.ini = sqrt(corr.bis^2/(1-(corr.bis^2)))
#proporcion de aciertos
pi = as.vector(apply(datos,2,sum) / P)
#a inicial
b.ini = -(qnorm(pi) / corr.bis)
#b inicial
c.ini = 1 / rep(m,I)
ini.andrade = matrix(c(a.ini,b.ini,c.ini),ncol=3)
colnames(ini.andrade) = c("a","b","c")
ini.andrade
}
#funciÃ³n de puntos de cuadratura y pesos
library(statmod)
Cuad = gauss.quad(n=41,"hermite")
pt.cuad = Cuad[[1]] * sqrt(2)
pt.cuad = - (pt.cuad)
#pt.cuad
w.cuad = Cuad[[2]]  /  sqrt(pi)
pt.cuad = read.table("/home/mirt/Trabajo IRT/Algoritmo SICS/PWcuad.csv",dec=".",sep = " ",header = T)
w.cuad = pt.cuad[,2]
pt.cuad = pt.cuad[,1]
#Valores Iniciales Andrade
#and = t(start.andrade(datos))
#and[2,] = -and[2,] * and[1,]
#and[3,] = qlogis(and[3,])
#valores iniciales MIRT
inicio.mirt = function(datos){
ini.mirt = mirt(data=datos,model=1,itemtype="3PL",pars="values")
ini.mirt = ini.mirt$value
ini.mirt = ini.mirt[1:(length(ini.mirt) -2)]
ini.mirt = t(matrix(ini.mirt,ncol=4,byrow=T)[,c(1,2,3)])
ini.mirt[3,] = qlogis(ini.mirt[3,])
and = ini.mirt
and
}
patrones = function(datos){
items = ncol(datos)
comprim = apply(datos,MARGIN=1,FUN=paste,collapse="/")
freq = table(comprim)
pats = names(freq)
freq = as.vector(freq)
pats = as.numeric(unlist(lapply(pats,FUN=strsplit,split="/")))
pats = matrix(pats,ncol=items,byrow=T)
pats = cbind(pats,freq)
pats
}
#Probabilidad
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
#Log verosimilitud
LL = function(zita.vec,R,fvec,pt.cuad,nitems){
suma = 0
for(k in 1:41){
for(i in 1:nitems){
rki = R[k,i]
fki = fvec[k]
a = zita.vec[i]
d = zita.vec[nitems + i]
c = zita.vec[2*nitems + i]
pki = gg(a=a,d=d,cp=c,theta=pt.cuad[k])
qki = 1 - pki
suma = suma + (rki*log(pki)+(fki-rki)*
log(qki))
}
}
-suma
}
LL2 = function(zita.vec,R,fvec,pt.cuad,nitems,and){
.Call("Loglik",zita.vec,R,fvec,pt.cuad)
}
gradLoglik = function(zita.vec,R,fvec,pt.cuad,nitems,and){
.Call("grad",zita.vec,R,fvec,pt.cuad)
}
inicio = Sys.time()
###################
# Algoritmos SICS #
###################
estimacion.Newton = function(datos){
and = inicio.mirt(datos)
and.copia = and
pats = patrones(datos)
npats = nrow(pats)
nitems = ncol(pats) - 1
zita.ant = zita = and
seguir = TRUE
mm = 0
contadorNear = 0
while(seguir){
inicio.ciclo = Sys.time()
mm = mm +1
##########
# Paso E #
##########
#inicioE = Sys.time()
RyF=.Call("calculoRF2",and,pt.cuad,w.cuad,pats)
#te = Sys.time() - inicioE
#print("*********Tiempo E")
#print(te)
R = RyF$R
fvec = RyF$fvec
##########
# Paso M #
##########
print("Entra a optim")
zita.vec = as.vector(t(zita))
#opt = optim(par=zita.vec,fn=LL,method="BFGS",R=R,fvec=fvec,pt.cuad=pt.cuad,nitems = nitems,control=list(maxit=10))
opt = optim(par=zita.vec,fn=LL2,gr=gradLoglik,method= "BFGS",R=R,fvec=fvec,pt.cuad=pt.cuad,nitems=nitems,and=and,control=list(maxit=20),hessian = T)
#opt = optim(par=zita.vec,fn=LL2,method= "L-BFGS-B",R=R,fvec=fvec,pt.cuad=pt.cuad,nitems=nitems,and=and,control=list(maxit=10))
#,lower = c(rep(-10,10),rep(-40,10),rep(-600,10)),upper = c(rep(10,10),rep(40,10),rep(600,10)))
#opt = vmmin(fr=LL,x=zita.vec,R=R,fvec=fvec,pt.cuad=pt.cuad,nitems = nitems)
contadorNear = contadorNear + 1
zita = matrix(opt$par,ncol=nitems,byrow=T)
hess = opt$hessian
zita[1,] = ifelse(abs(zita[1,]) > 10, and[1,], zita[1,])
zita[2,] = ifelse(abs(zita[2,]) > 40, and[2,], zita[2,])
zita[3,] = ifelse(abs(zita[3,]) > 600, and[3,], zita[3,])
##Imprime salidas
#print(mean(abs((zita - zita.ant)/zita.ant)))
print(paste("Fin ciclo: ", mm, " Convergencia: ", max(abs((zita - zita.ant)))," Tiempo Ciclo: ",Sys.time() - inicio.ciclo))
if(max(abs((zita - zita.ant))) < 10^(-3)){seguir = FALSE}
and = zita.ant = zita
if(mm > 1000){
print(paste("El algoritmo superÃ³ los ",mm - 1," ciclos",sep=""))
break()
#stop(paste("El algoritmo superÃ³ los ",mm - 1," ciclos",sep=""))
}
} #fin while
zita[3,] = plogis(zita[3,])
zita = t(zita)
list(zita=zita,contadorNear=contadorNear,ciclos = mm,pats = pats,hess = hess)
}
gcc = NULL
#sink("/home/mirt/Trabajo IRT/Algoritmo SICS/SalidaAUX.txt")
data(LSAT7)
LSAT7 = as.matrix(LSAT7)
datos = expand.table(LSAT7)
#datos = read.table("file:///home/mirt/ValidaciÃ³nTodoElAlgoritmo/Datasets/Test_10_6_1000.csv",sep=" ",header=T)
#datos = read.table("file:///home/mirt/ValidaciÃ³nTodoElAlgoritmo/Datasets/Test_10_2_1000.csv",sep=" ",header=T)
#datos = read.table("file:///home/mirt/ValidaciÃ³nTodoElAlgoritmo/Datasets/Test_10_10_2000.csv",sep=" ",header=T)
#datos = read.table("file:///home/mirt/ValidaciÃ³nTodoElAlgoritmo/Datasets/Test_100_2_10000.csv",sep=" ",header=T)
datos = read.table("file:///home/mirt/Validaciones_Modelos_Principales/3PL/Datasets/Test_10_1_1000.csv",sep=" ",header=T)
inicio = Sys.time()
est = estimacion.Newton(datos)
Sys.time() - inicio
#sink()
#MÃ©todo EAP
scoresEAP = function(est){
pats = est$pats
npats = nrow(est$pats)
nitems = ncol(est$pats) -1
ggpat = function(pat,zita,nitems,cuad){
p = rep(0,nitems)
for(i in 1:nitems){
p[i] = gg(a = zita[i,1],d = zita[i,2],cp = qlogis(zita[i,3]),theta = cuad)
if(pat[i] == 0){
p[i] = 1 - p[i]
}
}
prod(p)
}
thetaEst = rep(0,npats)
for(j in 1:npats){
sumNum = 0
sumDen = 0
for(k in 1:41){
pat = pats[j,][1:nitems]
sumNum = sumNum + (pt.cuad[k] * w.cuad[k] * ggpat(pat = pat,zita = est$zita,nitems = nitems,cuad = pt.cuad[k]))
sumDen = sumDen + (w.cuad[k] * ggpat(pat = pat,zita = est$zita,nitems = nitems,cuad = pt.cuad[k]))
}
thetaEst[j] = sumNum / sumDen
}
ret = cbind(est$pats[,-ncol(est$pats)],thetaEst)
colnames(ret) = c(sapply(X = 1:nitems,FUN = function(x){paste("Item",x,sep = " ")}),"Score")
ret
}
#Probabilidad
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
personfit = function(est,data){
scores = scoresEAP(est)
nitems = ncol(datos)
nscores = nrow(scores)
ninds = nrow(datos)
scoresTot = rep(0,nscores)
for(i in 1:ninds){
for(j in 1:nscores){
if(sum(datos[i,] == scores[j,][1:nitems]) == nitems){
scoresTot[i] = scores[j,][nitems + 1]
}
}
}
print(scoresTot)
LL = matrix(0,nrow = ninds,ncol = nitems)
for(j in 1:ninds){
for(i in 1:nitems){
LL[j,i] = gg(a = est$zita[i,1],d = - est$zita[i,2] * est$zita[i,1],cp = qlogis(est$zita[i,3]),theta = scoresTot[j,nitems + 1])
}
}
print(LL)
}
personfit(est = est,data = datos)
#Probabilidad
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
personfit = function(est,data){
scores = scoresEAP(est)
nitems = ncol(datos)
nscores = nrow(scores)
ninds = nrow(datos)
scoresTot = rep(0,nscores)
for(i in 1:ninds){
for(j in 1:nscores){
if(sum(datos[i,] == scores[j,][1:nitems]) == nitems){
scoresTot[i] = scores[j,][nitems + 1]
}
}
}
print(scoresTot)
LL = matrix(0,nrow = ninds,ncol = nitems)
for(j in 1:ninds){
for(i in 1:nitems){
LL[j,i] = gg(a = est$zita[i,1],d = - est$zita[i,2] * est$zita[i,1],cp = qlogis(est$zita[i,3]),theta = scoresTot[j,(nitems + 1])])
}
}
print(LL)
}
personfit(est = est,data = datos)
#Probabilidad
gg = function(a,d, cp,  theta){
exp(cp)/(1+exp(cp))+ (1-(exp(cp)/(1+exp(cp))))*(1 + exp(-D*(a*theta+ d)))^(-1)
}
personfit = function(est,data){
scores = scoresEAP(est)
nitems = ncol(datos)
nscores = nrow(scores)
ninds = nrow(datos)
scoresTot = rep(0,nscores)
for(i in 1:ninds){
for(j in 1:nscores){
if(sum(datos[i,] == scores[j,][1:nitems]) == nitems){
scoresTot[i] = scores[j,][nitems + 1]
}
}
}
print(scoresTot)
LL = matrix(0,nrow = ninds,ncol = nitems)
for(j in 1:ninds){
for(i in 1:nitems){
LL[j,i] = gg(a = est$zita[i,1],d = - est$zita[i,2] * est$zita[i,1],cp = qlogis(est$zita[i,3]),theta = scoresTot[j])
}
}
print(LL)
}
personfit(est = est,data = datos)
